package com.smartcampus.indoormodel.graph;

import java.util.Collection;
import java.util.List;

import com.smartcampus.indoormodel.AbsoluteLocation;

public interface IGraph {
	
    Edge addDirectionalEdge(Edge e);
    
    //We also add any missing vertices
    public Edge addDirectionalEdge(Vertex origin, Vertex destination);
    
    public boolean addElevatorVertex(Vertex v);
    
    public boolean addStaircaseVertex(Vertex v);
    
    Edge addUndirectionalEdge(Edge e);
    
    public Iterable<Edge> addUndirectionalEdges(Vertex v1, Vertex v2);
    
    public boolean addVertex(Vertex v);
    
    public Iterable<Vertex> adjacentVertices(Vertex v);
    
    public boolean areAdjacent(Vertex v, Vertex w);
    
    public boolean ContainsEdge(Edge e);
    
    public boolean ContainsVertex(Vertex v);
    
    public int degree(Vertex v);
    
    public Iterable<Vertex> destinations(Vertex v);
    
    public Vertex[] endVertices(Edge e);
    
    public Vertex getClosestVertex(AbsoluteLocation userAbsLoc);
    
    public List<Edge> getEdges();
    
    public List<Edge> getEdges(int floor);
    
    public List<Vertex> getElevatorVertices();
    
    public List<Vertex> getElevatorVertices(int level);
    
    public List<Vertex> getStaircaseVertices();
    
    public List<Vertex> getStaircaseVertices(int level);
    
    public Vertex getVertexById(int vertexId);
    
    public Collection<Vertex> getVertices();
    
    public List<Vertex> getVertices(int floor);
    
    public Iterable<Edge> incidentEdges(Vertex v);
    
    public int inDegree(Vertex v);
    
    // Methods dealing with directed edges //

    public Iterable<Edge> inEdges(Vertex v);
    
    //Methods dealing with positioning 
    //We don't bother to create a subclass for this behavior as our graph is only used for one purpose in this application
    public void InsertRadiusVertices(Vertex v, int radius);
    
    public int numEdges();
    
    public int numVertices();
    
    public Vertex opposite(Edge e, Vertex v);
    
    /**
     * @return All vertices with an edge going to v
     */
    public Iterable<Vertex> origins(Vertex v);        
    
    public int outDegree(Vertex v);
    
    public Iterable<Edge> outEdges(Vertex v);
    
    public boolean removeDirectionalEdge(Vertex origin, Vertex destination);
    
    public boolean removeElevatorVertex(Vertex v);
    
    public boolean removeStaircaseVertex(Vertex v);

	public boolean removeUndirectionalEdges(Vertex v1, Vertex v2);

	public boolean removeVertex(Vertex v);
}
