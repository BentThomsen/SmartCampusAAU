package com.smartcampus.webclient;

import com.smartcampus.indoormodel.graph.Edge;
import com.smartcampus.indoormodel.graph.IGraph;
import com.smartcampus.indoormodel.graph.Vertex;
/**
 * This class is only used as a means to hold the properties as well as 
 * the endpoints' ids. 
 * This is used because vertices may not yet have been constructed
 * @author admin
 *
 */
public class ShallowEdge extends Edge {

	public static void addUndirectionalEdges(IGraph graph, Iterable<ShallowEdge> shallowEdges) {
		Vertex v1, v2;
		Edge e1, e2;
		for (ShallowEdge e : shallowEdges)
		{
			v1 = graph.getVertexById(e.getOriginId());
			v2 = graph.getVertexById(e.getDestinationId());
			
			//extra check - just in case
			//Although there shouldn't get any inconsistencies between vertices and edges 
			//as long as we don't add stuff manually in the db.
			if (v1 == null || v2 == null)
				continue;
			
			//make 2* undirectional edges
			e1 = graph.addDirectionalEdge(v1, v2);
			e2 = graph.addDirectionalEdge(v2, v1);

			//We just use the same id for both directional edges
			//as we don't care about directions
			//It probably makes updates and deletes more efficient 
			e1.setId(e.getId());
			e2.setId(e.getId());
			
			boolean isElevator = e.isElevator();
			e1.setElevator(isElevator);
			e2.setElevator(isElevator);
			if (isElevator)
			{
				graph.addElevatorVertex(v1);
				graph.addElevatorVertex(v2);
			}
			
			boolean isStairs = e.isStair();
			e1.setStair(isStairs);
			e2.setStair(isStairs);
			if (isStairs)
			{
				graph.addStaircaseVertex(v1);
				graph.addStaircaseVertex(v2);
			}
			
			e1.setDirectional(e.isDirectional());
			e2.setDirectional(e.isDirectional());
						
		}
	}
	
	private int mOriginId, mDestinationId;
	
	public ShallowEdge(int originId, int destinationId)
	{
		super(null, null, 0);
		this.mOriginId = originId;
		this.mDestinationId = destinationId;
	}
	public int getDestinationId()
	{
		return mDestinationId;
	}
	
	public int getOriginId()
	{
		return mOriginId;
	}
}
